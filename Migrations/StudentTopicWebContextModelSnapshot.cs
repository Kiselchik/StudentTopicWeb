// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentTopicWeb.Data;

namespace StudentTopicWeb.Migrations
{
    [DbContext(typeof(StudentTopicWebContext))]
    partial class StudentTopicWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<int>("DisciplinesDisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("DisciplinesDisciplineId", "TeacherUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DiscName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DisciplineId");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.DisciplineGroup", b =>
                {
                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("DisciplineId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("DisciplineGroup");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GroupNumb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Student", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.StudentTopic", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("TopicId");

                    b.ToTable("StudentTopic");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Teacher", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("TopicId");

                    b.HasIndex("WorkId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisciplineGroupDisciplineId")
                        .HasColumnType("int");

                    b.Property<int?>("DisciplineGroupGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<int>("MaxTopics")
                        .HasColumnType("int");

                    b.Property<bool>("StudentTopicAllow")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("WorkId");

                    b.HasIndex("TypeId");

                    b.HasIndex("DisciplineGroupDisciplineId", "DisciplineGroupGroupId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTopicWeb.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTopicWeb.Models.DisciplineGroup", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Discipline", null)
                        .WithMany("DisciplineGroup")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTopicWeb.Models.Group", null)
                        .WithMany("DisciplineGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Student", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.StudentTopic", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Student", "Student")
                        .WithMany("StudentTopics")
                        .HasForeignKey("StudentUserId");

                    b.HasOne("StudentTopicWeb.Models.Topic", "Topic")
                        .WithMany("StudentTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Topic", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Work", "Work")
                        .WithMany("Topics")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Work", b =>
                {
                    b.HasOne("StudentTopicWeb.Models.Type", "Type")
                        .WithMany("Works")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTopicWeb.Models.DisciplineGroup", "DisciplineGroup")
                        .WithMany("Work")
                        .HasForeignKey("DisciplineGroupDisciplineId", "DisciplineGroupGroupId");

                    b.Navigation("DisciplineGroup");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Discipline", b =>
                {
                    b.Navigation("DisciplineGroup");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.DisciplineGroup", b =>
                {
                    b.Navigation("Work");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Group", b =>
                {
                    b.Navigation("DisciplineGroup");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Student", b =>
                {
                    b.Navigation("StudentTopics");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Topic", b =>
                {
                    b.Navigation("StudentTopics");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Type", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("StudentTopicWeb.Models.Work", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
